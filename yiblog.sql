CREATE DATABASE  IF NOT EXISTS `yiblog_db` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `yiblog_db`;
-- MySQL dump 10.13  Distrib 8.0.21, for Win64 (x86_64)
--
-- Host: localhost    Database: yiblog_db
-- ------------------------------------------------------
-- Server version	8.0.21

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_article`
--

DROP TABLE IF EXISTS `t_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` longtext,
  `content_md` longtext,
  `title` varchar(255) DEFAULT NULL,
  `category` int DEFAULT '1',
  `updatetime` datetime DEFAULT NULL,
  `hits` int DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `category_idx` (`category`),
  CONSTRAINT `category_id` FOREIGN KEY (`category`) REFERENCES `t_category` (`category_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article`
--

LOCK TABLES `t_article` WRITE;
/*!40000 ALTER TABLE `t_article` DISABLE KEYS */;
INSERT INTO `t_article` VALUES (1,'<h1 id=\"h1-mysql-\"><a name=\"mysql简介\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>mysql简介</h1><h3 id=\"h3-1-\"><a name=\"1、什么是数据库 ？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、什么是数据库 ？</h3><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。</p>\r\n<p>主流的数据库有：sqlserver，mysql，Oracle、SQLite、Access、MS SQL Server等，本文主要讲述的是mysql</p>\r\n<h3 id=\"h3-2-\"><a name=\"2、数据库管理是干什么用的？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、数据库管理是干什么用的？</h3><p>a. 将数据保存到文件或内存<br>b. 接收特定的命令，然后对文件进行相应的操作<br>PS：如果有了以上管理系统，无须自己再去创建文件和文件夹，而是直接传递 命令 给上述软件，让其来进行文件操作，他们统称为数据库管理系统（DBMS，Database Management System）</p>\r\n<h1 id=\"h1-mysql-\"><a name=\"mysql安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>mysql安装</h1><p>MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），MySQL数据库系统使用最常用的数据库管理语言—结构化查询语言（SQL）进行数据库管理。在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>\r\n<p>使用mysql必须具备一下条件</p>\r\n<p>　　a. 安装MySQL服务端<br>　　b. 安装MySQL客户端<br>　　b. 【客户端】连接【服务端】<br>　　c. 【客户端】发送命令给【服务端MySQL】服务的接受命令并执行相应操作(增删改查等)<br>1、下载地址：<a href=\"http://dev.mysql.com/downloads/mysql/\">http://dev.mysql.com/downloads/mysql/</a></p>\r\n<p>2、安装</p>\r\n<p>windows安装请参考：<a href=\"http://www.cnblogs.com/lonelywolfmoutain/p/4547115.html\">http://www.cnblogs.com/lonelywolfmoutain/p/4547115.html</a><br>linux下安装：<a href=\"http://www.cnblogs.com/chenjunbiao/archive/2011/01/24/1940256.html\">http://www.cnblogs.com/chenjunbiao/archive/2011/01/24/1940256.html</a><br> 注：以上两个链接有完整的安装方式，撸主也是参考他的安装的，安装完以后mysql.server start启动mysql服务</p>\r\n<h1 id=\"h1-mysql-\"><a name=\"mysql操作\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>mysql操作</h1><h3 id=\"h3--\"><a name=\"一、连接数据库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、连接数据库</h3><p><code>mysql  -u user -p                   例：mysql -u root -p</code><br> 常见错误如下：</p>\r\n<pre><code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2), it means that the MySQL server daemon (Unix) or service (Windows) is not running.\r\n退出连接：\r\n</code></pre><p>QUIT 或者 Ctrl+D</p>\r\n<h3 id=\"h3--show-databases-\"><a name=\"二、查看数据库，创建数据库，使用数据库查看数据库: show databases;\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二、查看数据库，创建数据库，使用数据库查看数据库: show databases;</h3><p>默认数据库：<br>　          　 mysql - 用户权限相关数据<br>　　           test - 用于用户测试数据<br>　          　 information_schema - MySQL本身架构相关数据</p>\r\n<p>创建数据库:</p>\r\n<pre><code>               create database db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;     # utf8编码\r\n               create database db1 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; # gbk编码\r\n</code></pre><p>使用数据库:    <code>use db1;</code><br> 显示当前使用的数据库中所有表：<code>SHOW TABLES;</code></p>\r\n<p>三、用户管理</p>\r\n<p>创建用户<br>   <code>create user &#39;用户名&#39;@&#39;IP地址&#39; identified by &#39;密码&#39;;</code><br>删除用户<br>    <code>drop user &#39;用户名&#39;@&#39;IP地址&#39;;</code><br>修改用户<br>    <code>rename user &#39;用户名&#39;@&#39;IP地址&#39;; to &#39;新用户名&#39;@&#39;IP地址&#39;;;</code><br>修改密码<br>   <code>set password for &#39;用户名&#39;@&#39;IP地址&#39; = Password(&#39;新密码&#39;)</code><br>注：用户权限相关数据保存在mysql数据库的user表中，所以也可以直接对其进行操作（不建议）</p>\r\n','# mysql简介\r\n### 1、什么是数据库 ？\r\n\r\n数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。\r\n\r\n主流的数据库有：sqlserver，mysql，Oracle、SQLite、Access、MS SQL Server等，本文主要讲述的是mysql\r\n\r\n### 2、数据库管理是干什么用的？\r\n\r\na. 将数据保存到文件或内存\r\nb. 接收特定的命令，然后对文件进行相应的操作\r\nPS：如果有了以上管理系统，无须自己再去创建文件和文件夹，而是直接传递 命令 给上述软件，让其来进行文件操作，他们统称为数据库管理系统（DBMS，Database Management System）\r\n\r\n# mysql安装\r\nMySQL是一种开放源代码的关系型数据库管理系统（RDBMS），MySQL数据库系统使用最常用的数据库管理语言--结构化查询语言（SQL）进行数据库管理。在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。\r\n\r\n使用mysql必须具备一下条件\r\n\r\n　　a. 安装MySQL服务端\r\n　　b. 安装MySQL客户端\r\n　　b. 【客户端】连接【服务端】\r\n　　c. 【客户端】发送命令给【服务端MySQL】服务的接受命令并执行相应操作(增删改查等)\r\n1、下载地址：http://dev.mysql.com/downloads/mysql/\r\n\r\n2、安装\r\n\r\nwindows安装请参考：http://www.cnblogs.com/lonelywolfmoutain/p/4547115.html\r\nlinux下安装：http://www.cnblogs.com/chenjunbiao/archive/2011/01/24/1940256.html\r\n 注：以上两个链接有完整的安装方式，撸主也是参考他的安装的，安装完以后mysql.server start启动mysql服务\r\n#  mysql操作\r\n### 一、连接数据库\r\n\r\n```mysql  -u user -p                   例：mysql -u root -p```\r\n 常见错误如下：\r\n\r\n```\r\nERROR 2002 (HY000): Can\'t connect to local MySQL server through socket \'/tmp/mysql.sock\' (2), it means that the MySQL server daemon (Unix) or service (Windows) is not running.\r\n退出连接：```\r\nQUIT 或者 Ctrl+D\r\n### 二、查看数据库，创建数据库，使用数据库查看数据库: show databases;\r\n\r\n默认数据库：\r\n　          　 mysql - 用户权限相关数据\r\n　　           test - 用于用户测试数据\r\n　          　 information_schema - MySQL本身架构相关数据\r\n \r\n创建数据库:\r\n```     \r\n               create database db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;     # utf8编码\r\n               create database db1 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; # gbk编码\r\n			   ```\r\n使用数据库:    ``` use db1;```\r\n 显示当前使用的数据库中所有表：```SHOW TABLES;```\r\n\r\n三、用户管理\r\n\r\n创建用户\r\n   ``` create user \'用户名\'@\'IP地址\' identified by \'密码\';```\r\n删除用户\r\n    ```drop user \'用户名\'@\'IP地址\';```\r\n修改用户\r\n    ```rename user \'用户名\'@\'IP地址\'; to \'新用户名\'@\'IP地址\';;```\r\n修改密码\r\n   ``` set password for \'用户名\'@\'IP地址\' = Password(\'新密码\')```\r\n注：用户权限相关数据保存在mysql数据库的user表中，所以也可以直接对其进行操作（不建议）','MYSQL(一)',6,'2020-12-22 11:06:06',3),(2,'<h1 id=\"h1-springboot-\"><a name=\"SpringBoot是什么？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>SpringBoot是什么？</h1><p> 我管她是什么，好用就行了啊！！！但是无奈我的简历上写了“精通SpringBoot”。。。那总得大体说得上SpringBoot是个啥东西吧！</p>\r\n<p>Spring相信大家都用过，那一堆的配置，用起来就好比：你要吃饭，饭是熟的，但是你还要自己（配置）加油盐酱醋，还得搅拌均匀，然后才能吃，，，</p>\r\n<p>SpringBoot就不一样了，直接给你端过来一碗香喷喷的牛肉拉面，哇，好香，，，，（好吧，写这个博客的时候没有吃饭，臆想一下，）你可以直接狼吞虎咽了有木有？啥？你想让她帮你嚼碎然后喂你？！！！滚吧你。。。</p>\r\n<h2 id=\"h2--spring-boot\"><a name=\"一、关于Spring Boot\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、关于Spring Boot</h2><p>在开始了解Spring Boot之前，我们需要先了解一下Spring，因为Spring Boot的诞生和Spring是息息相关的，Spring Boot是Spring发展到一定程度的一个产物，但并不是Spring的替代品，Spring Boot是为了让程序员更好的使用Spring。说到这里可能有些人会迷糊，那到底Spring和Spring Boot有着什么样的联系呢？</p>\r\n<h3 id=\"h3-1-spring-\"><a name=\"1.Spring发展史\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.Spring发展史</h3><p>在开始之前我们先了解一下Spring，Spring的前身是interface21，这个框架最初是为了解决EJB开发笨重臃肿的问题，为J2EE提供了另一种简单又实用的解决方案，并在2004年3月发布了Spring 1.0正式版之后，就引起了Java界广泛的关注和热评，从此Spring在Java界势如破竹迅速走红，一路成为Java界一颗璀璨夺目的明星，至今无可替代，也一度成为J2EE开发中真正意义上的标准了，而他的创始人Rod Johnson也在之后声名大噪，名利双收，现在是一名优秀的天使投资人，走上了人生的巅峰。</p>\r\n<h3 id=\"h3-2-spring-boot-\"><a name=\"2.Spring Boot诞生\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.Spring Boot诞生</h3><p>那既然Spring已经这么优秀了，为什么还有了之后Spring Boot？</p>\r\n<p>因为随着Spring发展的越来越火，Spring也慢慢从一个小而精的框架变成了，一个覆盖面广大而全的框架，另一方面随着新技术的发展，比如nodejs、golang、Ruby的兴起，让Spring逐渐看着笨重起来，大量繁琐的XML配置和第三方整合配置，让Spring使用者痛苦不已，这个时候急需一个解决方案，来解决这些问题。</p>\r\n<p>就在这个节骨眼上Spring Boot应运而生，2013年Spring Boot开始研发，2014年4月Spring Boot 1.0正式发布，Spring Boot诞生之初就受到业界的广泛关注，很多个人和企业陆续开始尝试，随着Spring Boot 2.0的发布，又一次把Spring Boot推向了公众的视野，也有越来越多了的中大型企业把Spring Boot使用到正式的生产环境了。值得一提的是Spring官方也把Spring Boot作为首要的推广项目，放到了官网的首位。</p>\r\n<h3 id=\"h3-\"><a name=\"\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span> </h3><p>3.Spring Boot介绍<br>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot其实就是一个整合很多可插拔的组件（框架），内嵌了使用工具（比如内嵌了Tomcat、Jetty等），方便开发人员快速搭建和开发的一个框架。</p>\r\n<p>上面的解释是为了大家方便理解，加深记忆。。。下面看看官方的介绍：</p>\r\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>\r\n<blockquote>\r\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>\r\n<p>We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>\r\n</blockquote>\r\n<p>我忍不住想翻译一下：</p>\r\n<p>Spring Boot使创建独立的、基于生产级Spring的应用程序变得很容易，您可以“直接运行”这些应用程序。</p>\r\n<p>我们对Spring平台和第三方库有自己的见解，这样您就可以轻松入门了。大多数Spring引导应用程序只需要很少的Spring配置。<br>大体意思就是说，她真的很好用，她可以让你在服务的搭建时省去很多繁琐的配置，用过之后的体验：“简直像是日了狗了”。。。</p>\r\n<h3 id=\"h3-4-spring-boot-\"><a name=\"4.Spring Boot特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.Spring Boot特点</h3><p>搭建项目快，几秒钟就可以搭建完成；<br>让测试变的简单，内置了JUnit、Spring Boot Test等多种测试框架，方便测试；<br>Spring Boot让配置变的简单，Spring Boot的核心理念：约定大约配置，约定了某种命名规范，可以不用配置，就可以完成功能开发，比如模型和表名一致就可以不用配置，直接进行CRUD（增删改查）的操作，只有表名和模型不一致的时候，配置名称即可；<br>内嵌容器，省去了配置Tomcat的繁琐；<br>方便监控，使用Spring Boot Actuator组件提供了应用的系统监控，可以查看应用配置的详细信息；</p>\r\n','# SpringBoot是什么？\r\n 我管她是什么，好用就行了啊！！！但是无奈我的简历上写了“精通SpringBoot”。。。那总得大体说得上SpringBoot是个啥东西吧！\r\n\r\nSpring相信大家都用过，那一堆的配置，用起来就好比：你要吃饭，饭是熟的，但是你还要自己（配置）加油盐酱醋，还得搅拌均匀，然后才能吃，，，\r\n\r\nSpringBoot就不一样了，直接给你端过来一碗香喷喷的牛肉拉面，哇，好香，，，，（好吧，写这个博客的时候没有吃饭，臆想一下，）你可以直接狼吞虎咽了有木有？啥？你想让她帮你嚼碎然后喂你？！！！滚吧你。。。\r\n\r\n## 一、关于Spring Boot\r\n在开始了解Spring Boot之前，我们需要先了解一下Spring，因为Spring Boot的诞生和Spring是息息相关的，Spring Boot是Spring发展到一定程度的一个产物，但并不是Spring的替代品，Spring Boot是为了让程序员更好的使用Spring。说到这里可能有些人会迷糊，那到底Spring和Spring Boot有着什么样的联系呢？\r\n\r\n### 1.Spring发展史\r\n在开始之前我们先了解一下Spring，Spring的前身是interface21，这个框架最初是为了解决EJB开发笨重臃肿的问题，为J2EE提供了另一种简单又实用的解决方案，并在2004年3月发布了Spring 1.0正式版之后，就引起了Java界广泛的关注和热评，从此Spring在Java界势如破竹迅速走红，一路成为Java界一颗璀璨夺目的明星，至今无可替代，也一度成为J2EE开发中真正意义上的标准了，而他的创始人Rod Johnson也在之后声名大噪，名利双收，现在是一名优秀的天使投资人，走上了人生的巅峰。\r\n\r\n### 2.Spring Boot诞生\r\n那既然Spring已经这么优秀了，为什么还有了之后Spring Boot？\r\n\r\n因为随着Spring发展的越来越火，Spring也慢慢从一个小而精的框架变成了，一个覆盖面广大而全的框架，另一方面随着新技术的发展，比如nodejs、golang、Ruby的兴起，让Spring逐渐看着笨重起来，大量繁琐的XML配置和第三方整合配置，让Spring使用者痛苦不已，这个时候急需一个解决方案，来解决这些问题。\r\n\r\n就在这个节骨眼上Spring Boot应运而生，2013年Spring Boot开始研发，2014年4月Spring Boot 1.0正式发布，Spring Boot诞生之初就受到业界的广泛关注，很多个人和企业陆续开始尝试，随着Spring Boot 2.0的发布，又一次把Spring Boot推向了公众的视野，也有越来越多了的中大型企业把Spring Boot使用到正式的生产环境了。值得一提的是Spring官方也把Spring Boot作为首要的推广项目，放到了官网的首位。\r\n### \r\n3.Spring Boot介绍\r\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot其实就是一个整合很多可插拔的组件（框架），内嵌了使用工具（比如内嵌了Tomcat、Jetty等），方便开发人员快速搭建和开发的一个框架。\r\n\r\n上面的解释是为了大家方便理解，加深记忆。。。下面看看官方的介绍：\r\n\r\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".\r\n\r\n> Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".\r\n\r\n> We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\r\n\r\n我忍不住想翻译一下：\r\n\r\nSpring Boot使创建独立的、基于生产级Spring的应用程序变得很容易，您可以“直接运行”这些应用程序。\r\n\r\n我们对Spring平台和第三方库有自己的见解，这样您就可以轻松入门了。大多数Spring引导应用程序只需要很少的Spring配置。\r\n大体意思就是说，她真的很好用，她可以让你在服务的搭建时省去很多繁琐的配置，用过之后的体验：“简直像是日了狗了”。。。\r\n\r\n### 4.Spring Boot特点\r\n搭建项目快，几秒钟就可以搭建完成；\r\n让测试变的简单，内置了JUnit、Spring Boot Test等多种测试框架，方便测试；\r\nSpring Boot让配置变的简单，Spring Boot的核心理念：约定大约配置，约定了某种命名规范，可以不用配置，就可以完成功能开发，比如模型和表名一致就可以不用配置，直接进行CRUD（增删改查）的操作，只有表名和模型不一致的时候，配置名称即可；\r\n内嵌容器，省去了配置Tomcat的繁琐；\r\n方便监控，使用Spring Boot Actuator组件提供了应用的系统监控，可以查看应用配置的详细信息；','SpringBoot是什么？',2,'2020-12-22 11:08:32',2),(3,'<h1 id=\"h1--jdbc-\"><a name=\"一：对原生态JDBC问题的总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一：对原生态JDBC问题的总结</h1><p>　　新项目要使用mybatis作为持久层框架，由于本人之前一直使用的Hibernate，对mybatis的用法实在欠缺，最近几天计划把mybatis学习一哈，特将学习笔记记录于此，方便大家参考，也方便自己查阅。</p>\r\n<p>　　话不多说，先看看原始的JDBC程序代码，看看这样的代码存在什么问题。</p>\r\n<p> View Code<br>上面代码的问题总结：</p>\r\n<p>1、数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p>\r\n<p>解决方案：使用数据库连接池管理数据库连接。</p>\r\n<p>2、将sql语句硬编码到java代码中，如果sql 语句修改，需要重新编译java代码，不利于系统维护。</p>\r\n<p>解决方案：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。</p>\r\n<p>3、向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。</p>\r\n<p>解决方案：将sql语句及占位符号和参数全部配置在xml中。</p>\r\n<p>4、从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，，不利于系统维护。</p>\r\n<p>解决方案：将查询的结果集，自动映射成java对象。</p>\r\n<h1 id=\"h1--mybatis-\"><a name=\"二：MyBatis框架\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二：MyBatis框架</h1><p>　　1.MyBatis是什么？(下载地址：<a href=\"https://github.com/mybatis/mybatis-3/releases\">https://github.com/mybatis/mybatis-3/releases</a>)　</p>\r\n<p> 　　MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。 </p>\r\n<p>　　MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p>\r\n<p>　　Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p>\r\n','#  一：对原生态JDBC问题的总结\r\n　　新项目要使用mybatis作为持久层框架，由于本人之前一直使用的Hibernate，对mybatis的用法实在欠缺，最近几天计划把mybatis学习一哈，特将学习笔记记录于此，方便大家参考，也方便自己查阅。\r\n\r\n　　话不多说，先看看原始的JDBC程序代码，看看这样的代码存在什么问题。\r\n\r\n View Code\r\n上面代码的问题总结：\r\n\r\n1、数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。\r\n\r\n解决方案：使用数据库连接池管理数据库连接。\r\n\r\n2、将sql语句硬编码到java代码中，如果sql 语句修改，需要重新编译java代码，不利于系统维护。\r\n\r\n解决方案：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。\r\n\r\n3、向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。\r\n\r\n解决方案：将sql语句及占位符号和参数全部配置在xml中。\r\n\r\n4、从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，，不利于系统维护。\r\n\r\n解决方案：将查询的结果集，自动映射成java对象。\r\n\r\n#  二：MyBatis框架\r\n　　1.MyBatis是什么？(下载地址：https://github.com/mybatis/mybatis-3/releases)　\r\n\r\n 　　MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。 \r\n\r\n　　MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。\r\n\r\n　　Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。','MyBatis入门基础(一)',6,'2020-12-22 11:11:04',2),(4,'<h1 id=\"h1--\"><a name=\"开始使用 - 入门指南\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开始使用 - 入门指南</h1><p>layui（谐音：类UI) 是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS 的书写与组织形式，门槛极低，拿来即用。其外在极简，却又不失饱满的内在，体积轻盈，组件丰盈，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。layui 首个版本发布于 2016 年金秋，她区别于那些基于 MVVM 底层的 UI 框架，却并非逆道而行，而是信奉返璞归真之道。准确地说，她更多是为后端程序员量身定做，你无需涉足各种前端工具的复杂配置，只需面对浏览器本身，让一切你所需要的元素与交互，从这里信手拈来。</p>\r\n<h1 id=\"h1--layui\"><a name=\"获得 layui\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>获得 layui</h1><h3 id=\"h3-1-\"><a name=\"1. 官网首页下载\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1. 官网首页下载</h3><p>你可以在我们的 官网首页 下载到 layui 的最新版，它经过了自动化构建，更适合用于生产环境。目录结构如下：</p>\r\n<pre><code>codelayui.code\r\n  ├─css //css目录\r\n  │  │─modules //模块css目录（一般如果模块相对较大，我们会单独提取，比如下面三个：）\r\n  │  │  ├─laydate\r\n  │  │  ├─layer\r\n  │  │  └─layim\r\n  │  └─layui.css //核心样式文件\r\n  ├─font  //字体图标目录\r\n  ├─images //图片资源目录（目前只有layim和编辑器用到的GIF表情）\r\n  │─lay //模块核心目录\r\n  │  └─modules //各模块组件\r\n  │─layui.js //基础核心库\r\n  └─layui.all.js //包含layui.js和所有模块的合并文件\r\n</code></pre><h3 id=\"h3-2-git-\"><a name=\"2. Git 仓库下载\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2. Git 仓库下载</h3><p>你也可以通过 GitHub 或 码云 得到 layui 的完整开发包，以便于你进行二次开发，或者 Fork layui 为我们贡献方案</p>\r\n<h3 id=\"h3-3-npm-\"><a name=\"3. npm 安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3. npm 安装</h3><pre><code>codelayui.code\r\nnpm i layui-src\r\n</code></pre><p>一般用于 WebPack 管理</p>\r\n<p>快速上手<br>获得 layui 后，将其完整地部署到你的项目目录（或静态资源服务器），你只需要引入下述两个文件：</p>\r\n<pre><code>codelayui.code\r\n./layui/css/layui.css\r\n./layui/layui.js //提示：如果是采用非模块化方式（最下面有讲解），此处可换成：./layui/layui.all.js\r\n</code></pre><p>没错，不用去管其它任何文件。因为他们（比如各模块）都是在最终使用的时候才会自动加载。这是一个基本的入门页面：</p>\r\n<pre><code>codelayui.code\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=&quot;utf-8&quot;&gt;\r\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;\r\n  &lt;title&gt;开始使用layui&lt;/title&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;../layui/css/layui.css&quot;&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;!-- 你的HTML代码 --&gt;\r\n\r\n&lt;script src=&quot;../layui/layui.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n//一般直接写在一个js文件中\r\nlayui.use([&#39;layer&#39;, &#39;form&#39;], function(){\r\n  var layer = layui.layer\r\n  ,form = layui.form;\r\n\r\n  layer.msg(&#39;Hello World&#39;);\r\n});\r\n&lt;/script&gt; \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p>如果你想采用非模块化方式（即所有模块一次性加载，尽管我们并不推荐你这么做），你也可以按照下面的方式使用：</p>\r\n<pre><code>codelayui.code\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=&quot;utf-8&quot;&gt;\r\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;\r\n  &lt;title&gt;非模块化方式使用layui&lt;/title&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;../layui/css/layui.css&quot;&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;!-- 你的HTML代码 --&gt;\r\n\r\n&lt;script src=&quot;../layui/layui.all.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n//由于模块都一次性加载，因此不用执行 layui.use() 来加载对应模块，直接使用即可：\r\n;!function(){\r\n  var layer = layui.layer\r\n  ,form = layui.form;\r\n\r\n  layer.msg(&#39;Hello World&#39;);\r\n}();\r\n&lt;/script&gt; \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>','# 开始使用 - 入门指南\r\nlayui（谐音：类UI) 是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS 的书写与组织形式，门槛极低，拿来即用。其外在极简，却又不失饱满的内在，体积轻盈，组件丰盈，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。layui 首个版本发布于 2016 年金秋，她区别于那些基于 MVVM 底层的 UI 框架，却并非逆道而行，而是信奉返璞归真之道。准确地说，她更多是为后端程序员量身定做，你无需涉足各种前端工具的复杂配置，只需面对浏览器本身，让一切你所需要的元素与交互，从这里信手拈来。\r\n\r\n# 获得 layui\r\n### 1. 官网首页下载\r\n\r\n你可以在我们的 官网首页 下载到 layui 的最新版，它经过了自动化构建，更适合用于生产环境。目录结构如下：\r\n```\r\ncodelayui.code\r\n  ├─css //css目录\r\n  │  │─modules //模块css目录（一般如果模块相对较大，我们会单独提取，比如下面三个：）\r\n  │  │  ├─laydate\r\n  │  │  ├─layer\r\n  │  │  └─layim\r\n  │  └─layui.css //核心样式文件\r\n  ├─font  //字体图标目录\r\n  ├─images //图片资源目录（目前只有layim和编辑器用到的GIF表情）\r\n  │─lay //模块核心目录\r\n  │  └─modules //各模块组件\r\n  │─layui.js //基础核心库\r\n  └─layui.all.js //包含layui.js和所有模块的合并文件```\r\n### 2. Git 仓库下载\r\n\r\n你也可以通过 GitHub 或 码云 得到 layui 的完整开发包，以便于你进行二次开发，或者 Fork layui 为我们贡献方案\r\n\r\n \r\n \r\n### 3. npm 安装\r\n\r\n```\r\ncodelayui.code\r\nnpm i layui-src \r\n```\r\n一般用于 WebPack 管理\r\n\r\n快速上手\r\n获得 layui 后，将其完整地部署到你的项目目录（或静态资源服务器），你只需要引入下述两个文件：\r\n```\r\ncodelayui.code\r\n./layui/css/layui.css\r\n./layui/layui.js //提示：如果是采用非模块化方式（最下面有讲解），此处可换成：./layui/layui.all.js\r\n      ```\r\n没错，不用去管其它任何文件。因为他们（比如各模块）都是在最终使用的时候才会自动加载。这是一个基本的入门页面：\r\n```\r\ncodelayui.code\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\r\n  <title>开始使用layui</title>\r\n  <link rel=\"stylesheet\" href=\"../layui/css/layui.css\">\r\n</head>\r\n<body>\r\n \r\n<!-- 你的HTML代码 -->\r\n \r\n<script src=\"../layui/layui.js\"></script>\r\n<script>\r\n//一般直接写在一个js文件中\r\nlayui.use([\'layer\', \'form\'], function(){\r\n  var layer = layui.layer\r\n  ,form = layui.form;\r\n  \r\n  layer.msg(\'Hello World\');\r\n});\r\n</script> \r\n</body>\r\n</html>\r\n```      \r\n如果你想采用非模块化方式（即所有模块一次性加载，尽管我们并不推荐你这么做），你也可以按照下面的方式使用：\r\n```\r\ncodelayui.code\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\r\n  <title>非模块化方式使用layui</title>\r\n  <link rel=\"stylesheet\" href=\"../layui/css/layui.css\">\r\n</head>\r\n<body>\r\n\r\n<!-- 你的HTML代码 -->\r\n \r\n<script src=\"../layui/layui.all.js\"></script>\r\n<script>\r\n//由于模块都一次性加载，因此不用执行 layui.use() 来加载对应模块，直接使用即可：\r\n;!function(){\r\n  var layer = layui.layer\r\n  ,form = layui.form;\r\n  \r\n  layer.msg(\'Hello World\');\r\n}();\r\n</script> \r\n</body>\r\n</html>\r\n      ```','Layui',3,'2020-12-22 11:14:55',2),(5,'<h1 id=\"h1-pagehelper-\"><a name=\"PageHelper使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PageHelper使用</h1><p>至于怎么使用我想上面提供的两个项目讲的绝逼讲的比我清楚，下面直接进入PageHelper使用实战</p>\r\n<p>首先，集成引入分页插件有下面2种方式，一种是直接下jar包一种是mawen依赖，推荐使用 Maven 方式。</p>\r\n<h3 id=\"h3--jar-\"><a name=\"方法一： 直接下载jar包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>方法一： 直接下载jar包</h3><p>jar包下载地址，由于使用了sql 解析工具，你还需要下载 jsqlparser.jar</p>\r\n<h3 id=\"h3--maven-\"><a name=\"方法二： Maven添加依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>方法二： Maven添加依赖</h3><pre><code>  &lt;dependency&gt;\r\n            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;\r\n            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;\r\n            &lt;version&gt;5.1.2&lt;/version&gt;\r\n  &lt;/dependency&gt;\r\n</code></pre><p>  2.各个情况下xml的配置<br>情况一：如果是mybatis单独使用PageHelper分页插件的时候，就需要在xml配置中添加如下代码：</p>\r\n<pre><code>  &lt;!--\r\nplugins在配置文件中的位置必须符合要求，否则会报错，顺序如下properties?, settings?,\r\n typeAliases?, typeHandlers?, objectFactory?,objectWrapperFactory?, plugins?, \r\n environments?, databaseIdProvider?, mappers?\r\n  --&gt;\r\n  &lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;\r\n    &lt;plugins&gt; \r\n    &lt;!-- 使用下面的方式配置参数，推荐的两个项目中有所有的参数介绍 --&gt;\r\n        &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; \r\n            &lt;property name=&quot;param1&quot; value=&quot;value1&quot;/&gt;\r\n        &lt;/plugin&gt;\r\n    &lt;/plugins&gt;\r\n</code></pre><p>情况二：显然，我是这个是ssm项目，mybatis是交由spring的IOC容器管理的，就需要在spring的xml配置中添加如下代码（创建工厂中添加）：</p>\r\n<pre><code>&lt;!-- 把交给IOC管理 SqlSessionFactory --&gt;\r\n &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\r\n     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\r\n     &lt;!-- 传入PageHelper的插件 --&gt;\r\n     &lt;property name=&quot;plugins&quot;&gt;\r\n         &lt;array&gt;\r\n             &lt;!-- 传入插件的对象 --&gt;\r\n             &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;\r\n                 &lt;property name=&quot;properties&quot;&gt;\r\n                     &lt;props&gt;\r\n                         &lt;prop key=&quot;helperDialect&quot;&gt;oracle&lt;/prop&gt;\r\n                         &lt;prop key=&quot;reasonable&quot;&gt;true&lt;/prop&gt;\r\n                     &lt;/props&gt;\r\n                 &lt;/property&gt;\r\n             &lt;/bean&gt;\r\n         &lt;/array&gt;\r\n     &lt;/property&gt;\r\n &lt;/bean&gt;\r\n</code></pre>','# PageHelper使用\r\n至于怎么使用我想上面提供的两个项目讲的绝逼讲的比我清楚，下面直接进入PageHelper使用实战\r\n\r\n首先，集成引入分页插件有下面2种方式，一种是直接下jar包一种是mawen依赖，推荐使用 Maven 方式。\r\n\r\n### 方法一： 直接下载jar包\r\n\r\njar包下载地址，由于使用了sql 解析工具，你还需要下载 jsqlparser.jar\r\n\r\n### 方法二： Maven添加依赖\r\n```\r\n  <dependency>\r\n            <groupId>com.github.pagehelper</groupId>\r\n            <artifactId>pagehelper</artifactId>\r\n            <version>5.1.2</version>\r\n  </dependency>```\r\n  \r\n  2.各个情况下xml的配置\r\n情况一：如果是mybatis单独使用PageHelper分页插件的时候，就需要在xml配置中添加如下代码：\r\n```\r\n  <!--\r\nplugins在配置文件中的位置必须符合要求，否则会报错，顺序如下properties?, settings?,\r\n typeAliases?, typeHandlers?, objectFactory?,objectWrapperFactory?, plugins?, \r\n environments?, databaseIdProvider?, mappers?\r\n  -->\r\n  <!-- com.github.pagehelper为PageHelper类所在包名 -->\r\n    <plugins> \r\n    <!-- 使用下面的方式配置参数，推荐的两个项目中有所有的参数介绍 -->\r\n        <plugin interceptor=\"com.github.pagehelper.PageInterceptor\"> \r\n            <property name=\"param1\" value=\"value1\"/>\r\n        </plugin>\r\n    </plugins>\r\n	```\r\n情况二：显然，我是这个是ssm项目，mybatis是交由spring的IOC容器管理的，就需要在spring的xml配置中添加如下代码（创建工厂中添加）：\r\n```\r\n<!-- 把交给IOC管理 SqlSessionFactory -->\r\n <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n     <property name=\"dataSource\" ref=\"dataSource\"/>\r\n     <!-- 传入PageHelper的插件 -->\r\n     <property name=\"plugins\">\r\n         <array>\r\n             <!-- 传入插件的对象 -->\r\n             <bean class=\"com.github.pagehelper.PageInterceptor\">\r\n                 <property name=\"properties\">\r\n                     <props>\r\n                         <prop key=\"helperDialect\">oracle</prop>\r\n                         <prop key=\"reasonable\">true</prop>\r\n                     </props>\r\n                 </property>\r\n             </bean>\r\n         </array>\r\n     </property>\r\n </bean>\r\n ```\r\n','Mybatis分页插件PageHelper',5,'2020-12-22 11:19:15',0),(6,'<h1 id=\"h1-editormd-\"><a name=\"editormd使用教程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>editormd使用教程</h1><p>对于现在的程序员来说，都需要一个快速写文章的语言，那么无非就是markdown了，市面上markdown编辑器并不多，而且也不怎么好用，现在推荐国内的比较牛逼的。</p>\r\n<h2 id=\"h2-u5165u95E8\"><a name=\"入门\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>入门</h2><p>建议先到官方看下如何使用，避免少走弯路。<br>官方地址 <a href=\"https://pandao.github.io/editor.md/examples/index.html\">https://pandao.github.io/editor.md/examples/index.html</a><br>下载安装<br>下载地址 <a href=\"https://pandao.github.io/editor.md/\">https://pandao.github.io/editor.md/</a><br>开始集成<br>将editormd拷贝到你的项目</p>\r\n<h3 id=\"h3-css-\"><a name=\"css代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>css代码</h3><p><code>&lt;link href=&quot;/Content/editormd/css/editormd.min.css&quot; rel=&quot;stylesheet&quot; /&gt;</code></p>\r\n<h3 id=\"h3-js-\"><a name=\"js代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>js代码</h3><pre><code>&lt;script src=&quot;/Content/editormd/editormd.min.js&quot;&gt;&lt;/script&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n    //初始化编辑器\r\n    var testEditor;\r\n    $(function () {\r\n        testEditor = editormd(&quot;txtblogcontent&quot;, {\r\n            width: &quot;100%&quot;,\r\n            height: 740,\r\n            path: &#39;/Content/editormd/lib/&#39;,\r\n            theme: &quot;dark&quot;,\r\n            previewTheme: &quot;dark&quot;,\r\n            editorTheme: &quot;pastel-on-dark&quot;,\r\n            markdown: &quot;&quot;,\r\n            codeFold: true,\r\n            //syncScrolling : false,\r\n            saveHTMLToTextarea: true,    // 保存 HTML 到 Textarea\r\n            searchReplace: true,\r\n            //watch : false,                // 关闭实时预览\r\n            htmlDecode: &quot;style,script,iframe|on*&quot;,            // 开启 HTML 标签解析，为了安全性，默认不开启    \r\n            //toolbar  : false,             //关闭工具栏\r\n            //previewCodeHighlight : false, // 关闭预览 HTML 的代码块高亮，默认开启\r\n            emoji: true,\r\n            taskList: true,\r\n            tocm: true,         // Using [TOCM]\r\n            tex: true,                   // 开启科学公式TeX语言支持，默认关闭\r\n            flowChart: true,             // 开启流程图支持，默认关闭\r\n            sequenceDiagram: true,       // 开启时序/序列图支持，默认关闭,\r\n            //dialogLockScreen : false,   // 设置弹出层对话框不锁屏，全局通用，默认为true\r\n            //dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true\r\n            //dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为true\r\n            //dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为0.1\r\n            //dialogMaskBgColor : &quot;#000&quot;, // 设置透明遮罩层的背景颜色，全局通用，默认为#fff\r\n            imageUpload: true,\r\n            imageFormats: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],\r\n            imageUploadURL: &quot;/Center/RichTextUpload&quot;,\r\n            onload: function () {\r\n                //console.log(&#39;onload&#39;, this);\r\n                //this.fullscreen();\r\n                //this.unwatch();\r\n                //this.watch().fullscreen();\r\n\r\n                //this.setMarkdown(&quot;#PHP&quot;);\r\n                //this.width(&quot;100%&quot;);\r\n                //this.height(480);\r\n                //this.resize(&quot;100%&quot;, 640);\r\n            }\r\n        });\r\n    });\r\n\r\n    //获取编辑器内容\r\n    var blogcontent = encodeURIComponent(testEditor.getMarkdown());\r\n&lt;/script&gt;\r\n</code></pre><h2 id=\"h2--markdown-html\"><a name=\"将markdown转换成html\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>将markdown转换成html</h2><h3 id=\"h3-css-\"><a name=\"css代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>css代码</h3><p> <code>&lt;link href=&quot;/Content/editormd/css/editormd.min.css&quot; rel=&quot;stylesheet&quot; /&gt;</code></p>\r\n<h3 id=\"h3-html-\"><a name=\"html代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>html代码</h3><h3 id=\"h3-js-\"><a name=\"js代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>js代码</h3><pre><code>&lt;script src=&quot;/Content/editormd/lib/marked.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/prettify.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/raphael.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/underscore.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/sequence-diagram.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/flowchart.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/lib/jquery.flowchart.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script src=&quot;/Content/editormd/editormd.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot;&gt;\r\n    var testEditor;\r\n    $(function () {\r\n        testEditor = editormd.markdownToHTML(&quot;txtblogcontent&quot;, {\r\n            htmlDecode: &quot;style,script,iframe&quot;,  // you can filter tags decode\r\n            emoji: true,\r\n            taskList: true,\r\n            tex: true,  // 默认不解析\r\n            flowChart: true,  // 默认不解析\r\n            sequenceDiagram: true,  // 默认不解析\r\n            codeFold: true,\r\n    });\r\n &lt;/script&gt;\r\n</code></pre>','# editormd使用教程\r\n对于现在的程序员来说，都需要一个快速写文章的语言，那么无非就是markdown了，市面上markdown编辑器并不多，而且也不怎么好用，现在推荐国内的比较牛逼的。\r\n\r\n## 入门\r\n建议先到官方看下如何使用，避免少走弯路。\r\n官方地址 https://pandao.github.io/editor.md/examples/index.html\r\n下载安装\r\n下载地址 https://pandao.github.io/editor.md/\r\n开始集成\r\n将editormd拷贝到你的项目\r\n\r\n\r\n\r\n###  css代码\r\n``` <link href=\"/Content/editormd/css/editormd.min.css\" rel=\"stylesheet\" />```\r\n\r\n### js代码\r\n```\r\n<script src=\"/Content/editormd/editormd.min.js\"></script>\r\n<script type=\"text/javascript\">\r\n	//初始化编辑器\r\n	var testEditor;\r\n	$(function () {\r\n		testEditor = editormd(\"txtblogcontent\", {\r\n			width: \"100%\",\r\n			height: 740,\r\n			path: \'/Content/editormd/lib/\',\r\n			theme: \"dark\",\r\n			previewTheme: \"dark\",\r\n			editorTheme: \"pastel-on-dark\",\r\n			markdown: \"\",\r\n			codeFold: true,\r\n			//syncScrolling : false,\r\n			saveHTMLToTextarea: true,    // 保存 HTML 到 Textarea\r\n			searchReplace: true,\r\n			//watch : false,                // 关闭实时预览\r\n			htmlDecode: \"style,script,iframe|on*\",            // 开启 HTML 标签解析，为了安全性，默认不开启    \r\n			//toolbar  : false,             //关闭工具栏\r\n			//previewCodeHighlight : false, // 关闭预览 HTML 的代码块高亮，默认开启\r\n			emoji: true,\r\n			taskList: true,\r\n			tocm: true,         // Using [TOCM]\r\n			tex: true,                   // 开启科学公式TeX语言支持，默认关闭\r\n			flowChart: true,             // 开启流程图支持，默认关闭\r\n			sequenceDiagram: true,       // 开启时序/序列图支持，默认关闭,\r\n			//dialogLockScreen : false,   // 设置弹出层对话框不锁屏，全局通用，默认为true\r\n			//dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true\r\n			//dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为true\r\n			//dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为0.1\r\n			//dialogMaskBgColor : \"#000\", // 设置透明遮罩层的背景颜色，全局通用，默认为#fff\r\n			imageUpload: true,\r\n			imageFormats: [\"jpg\", \"jpeg\", \"gif\", \"png\", \"bmp\", \"webp\"],\r\n			imageUploadURL: \"/Center/RichTextUpload\",\r\n			onload: function () {\r\n				//console.log(\'onload\', this);\r\n				//this.fullscreen();\r\n				//this.unwatch();\r\n				//this.watch().fullscreen();\r\n\r\n				//this.setMarkdown(\"#PHP\");\r\n				//this.width(\"100%\");\r\n				//this.height(480);\r\n				//this.resize(\"100%\", 640);\r\n			}\r\n		});\r\n	});\r\n\r\n	//获取编辑器内容\r\n	var blogcontent = encodeURIComponent(testEditor.getMarkdown());\r\n</script>\r\n```\r\n## 将markdown转换成html\r\n### css代码\r\n ``` <link href=\"/Content/editormd/css/editormd.min.css\" rel=\"stylesheet\" />```\r\n### html代码\r\n\r\n\r\n### js代码\r\n```\r\n<script src=\"/Content/editormd/lib/marked.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/prettify.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/raphael.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/underscore.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/sequence-diagram.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/flowchart.min.js\"></script>\r\n <script src=\"/Content/editormd/lib/jquery.flowchart.min.js\"></script>\r\n <script src=\"/Content/editormd/editormd.min.js\"></script>\r\n <script type=\"text/javascript\">\r\n	var testEditor;\r\n	$(function () {\r\n		testEditor = editormd.markdownToHTML(\"txtblogcontent\", {\r\n			htmlDecode: \"style,script,iframe\",  // you can filter tags decode\r\n			emoji: true,\r\n			taskList: true,\r\n			tex: true,  // 默认不解析\r\n			flowChart: true,  // 默认不解析\r\n			sequenceDiagram: true,  // 默认不解析\r\n			codeFold: true,\r\n	});\r\n </script>\r\n ```','editormd使用教程',5,'2020-12-22 11:22:26',8),(7,'<p>在上一篇文章里，有看到一个简单算法题的2个解法，我们运用了复杂度分析来判断哪个解法更合适。<br>这里的复杂度，就是用于衡量程序的运行效率的重要度量因素。</p>\r\n<p>虽然有句俗话“不管是白猫还是黑猫，抓到老鼠就是好猫”，这句话是站在结果导向的，没错。但是如果<br>有个程序要去处理海量数据，一个程序员写的要执行2天，而另一个程序员只要半小时，那么第二种显然更适合<br>我们的实际需求。</p>\r\n<h1 id=\"h1--\"><a name=\"一、什么是复杂度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、什么是复杂度</h1><p>复杂度是一个关于输入数据量n的函数。</p>\r\n<p>要表示复杂度很简单，用大写O加上括号O()将复杂度包起来就好了。比如这个代码的复杂度是f(n)，那就可以写成<br>O(f(n))。</p>\r\n<p>在计算复杂度的时候，有三点需要我们记住：</p>\r\n<p>复杂度与具体常系数无关<br>多项式级复杂度相加，选择高者为结果<br>O(1)表示特殊复杂度</p>\r\n<h3 id=\"h3-1-\"><a name=\"1、复杂度与具体常系数无关\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、复杂度与具体常系数无关</h3><p>举个例子，将一个列表反转，不用reverse()。</p>\r\n<pre><code>def demo_1():\r\n    a = [1, 2, 3, 4, 5]\r\n    b = [0 for x in range(0,5)]  #第一个for循环\r\n    n = len(a)\r\n    for i in range(n):   # 第二个for循环\r\n        b[n - i - 1] = a[i]\r\n    print(b)\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    demo_1()\r\n\r\n===============运行结果==================\r\nD:\\Programs\\Python\\Python36\\python.exe D:/练习/leecode/fuzadu.py\r\n[5, 4, 3, 2, 1]\r\n</code></pre><p>Process finished with exit code 0<br>可以看到我先用了一个for循环创建了一个跟a列表等长度，元素全是0的列表。<br>然后再用一个for循环将a里的元素倒序放入b，最终得到一个跟a反序的列表。</p>\r\n<p>其中，每一个for循环的时间复杂度都是O(n)，2个加起来就是O(n)+O(n)，也等于O(n+n)，也等于O(2n)。<br>也就是相当于 一段 O(n)复杂度的代码先后执行两遍，它们的复杂度是一致的。</p>\r\n<h3 id=\"h3-2-2-\"><a name=\"2、多项式级复杂度相加，选择高者为结果2、多项式级复杂度相加，选择高者为结果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、多项式级复杂度相加，选择高者为结果2、多项式级复杂度相加，选择高者为结果</h3><p>有了上面的例子，这个也就好理解了。<br>假设，一个算法的复杂度是O(n²)+O(n)，那么可以知道，当n越来越大，也就是输入的数据量越来越大时，n^2的变化率要比n大的多，<br>所以，这时候我们只取变化率更大的n^2来表示复杂度即可，也就是O(n²)+O(n)等同于O(n²)。</p>\r\n<h3 id=\"h3-3-o-1-3-o-1-\"><a name=\"3、O(1)表示特殊复杂度3、O(1)表示特殊复杂度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3、O(1)表示特殊复杂度3、O(1)表示特殊复杂度</h3><p>还是借助上面的反转问题，这里再使用第二种解法。</p>\r\n<pre><code>def demo_2():\r\n    a = [1, 2, 3, 4, 5]\r\n    tmp = 0\r\n    n= len(a)\r\n\r\n    for i in range(n//2):    #  // 表示整数除法，返回不大于结果的一个最大整数\r\n        tmp = a[i]\r\n        a[i] = a[n -i -1]\r\n        a[n -i -1] = tmp\r\n    print(a)\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    demo_2()\r\n\r\n==============运行结果==============\r\nD:\\Programs\\Python\\Python36\\python.exe D:/练习/leecode/fuzadu.py\r\n[5, 4, 3, 2, 1]\r\n</code></pre><p>Process finished with exit code 0<br>跟第一个解法相比，第二个解法少了一个for循环，而且循环次数只是到了列表的一半，那么时间复杂度就是O(n/2)，<br>由于复杂度与具体的常系数无关的性质，这段代码的时间复杂度还是 O(n)。</p>\r\n<p>但是在空间复杂度上，第二个解法开辟了一个新的变量tmp，它与数组长度无关。<br>输入是 5 个元素的数组，需要一个tmp变量输入是 50 个元素的数组，同样只需要一个tmp变量。</p>\r\n<p>因此，空间复杂度与输入数组长度无关，这就是 O(1)。</p>\r\n<h1 id=\"h1--\"><a name=\"二、分析复杂度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二、分析复杂度</h1><p>这里就直接上一些经验性的结论，可以直接拿过来用的：</p>\r\n<p>一个顺序结构的代码，时间复杂度是 O(1)。<br>一个简单的 for 循环，时间复杂度是 O(n)。<br>两个顺序执行的 for 循环，时间复杂度是 O(n)+O(n)=O(2n)，其实也是 O(n)。<br>两个嵌套的 for 循环，时间复杂度是 O(n²)。<br>二分查找，时间复杂度都是 O(logn)。<br>趁热打铁，分析一下下面代码的复杂度：</p>\r\n<pre><code>for (i = 0; i &lt; n; i++) {\r\n    for (j = 0; j &lt; n; j++) {\r\n        for (k = 0; k &lt; n; k++) {\r\n        }\r\n        for (m = 0; m &lt; n; m++) {\r\n        }\r\n    }\r\n}\r\n</code></pre><p>可以先从最里面看，最内层是2个顺序结构的for循环，复杂度是O(n)。<br>中间这层的又嵌套了一个for循环，所以这时候复杂度就变成了O(n^2)。<br>最后，最外层又嵌套了一个for循环，所以最终的复杂度就是O(n^3)。</p>\r\n','在上一篇文章里，有看到一个简单算法题的2个解法，我们运用了复杂度分析来判断哪个解法更合适。\r\n这里的复杂度，就是用于衡量程序的运行效率的重要度量因素。\r\n\r\n虽然有句俗话“不管是白猫还是黑猫，抓到老鼠就是好猫”，这句话是站在结果导向的，没错。但是如果\r\n有个程序要去处理海量数据，一个程序员写的要执行2天，而另一个程序员只要半小时，那么第二种显然更适合\r\n我们的实际需求。\r\n\r\n# 一、什么是复杂度\r\n复杂度是一个关于输入数据量n的函数。\r\n\r\n要表示复杂度很简单，用大写O加上括号O()将复杂度包起来就好了。比如这个代码的复杂度是f(n)，那就可以写成\r\nO(f(n))。\r\n\r\n在计算复杂度的时候，有三点需要我们记住：\r\n\r\n复杂度与具体常系数无关\r\n多项式级复杂度相加，选择高者为结果\r\nO(1)表示特殊复杂度\r\n### 1、复杂度与具体常系数无关\r\n举个例子，将一个列表反转，不用reverse()。\r\n\r\n```\r\ndef demo_1():\r\n    a = [1, 2, 3, 4, 5]\r\n    b = [0 for x in range(0,5)]  #第一个for循环\r\n    n = len(a)\r\n    for i in range(n):   # 第二个for循环\r\n        b[n - i - 1] = a[i]\r\n    print(b)\r\n\r\nif __name__ == \"__main__\":\r\n    demo_1()\r\n\r\n===============运行结果==================\r\nD:\\Programs\\Python\\Python36\\python.exe D:/练习/leecode/fuzadu.py\r\n[5, 4, 3, 2, 1]\r\n```\r\n\r\nProcess finished with exit code 0\r\n可以看到我先用了一个for循环创建了一个跟a列表等长度，元素全是0的列表。\r\n然后再用一个for循环将a里的元素倒序放入b，最终得到一个跟a反序的列表。\r\n\r\n其中，每一个for循环的时间复杂度都是O(n)，2个加起来就是O(n)+O(n)，也等于O(n+n)，也等于O(2n)。\r\n也就是相当于 一段 O(n)复杂度的代码先后执行两遍，它们的复杂度是一致的。\r\n\r\n### 2、多项式级复杂度相加，选择高者为结果2、多项式级复杂度相加，选择高者为结果\r\n有了上面的例子，这个也就好理解了。\r\n假设，一个算法的复杂度是O(n²)+O(n)，那么可以知道，当n越来越大，也就是输入的数据量越来越大时，n^2的变化率要比n大的多，\r\n所以，这时候我们只取变化率更大的n^2来表示复杂度即可，也就是O(n²)+O(n)等同于O(n²)。\r\n\r\n### 3、O(1)表示特殊复杂度3、O(1)表示特殊复杂度\r\n还是借助上面的反转问题，这里再使用第二种解法。\r\n```\r\ndef demo_2():\r\n    a = [1, 2, 3, 4, 5]\r\n    tmp = 0\r\n    n= len(a)\r\n\r\n    for i in range(n//2):    #  // 表示整数除法，返回不大于结果的一个最大整数\r\n        tmp = a[i]\r\n        a[i] = a[n -i -1]\r\n        a[n -i -1] = tmp\r\n    print(a)\r\n\r\nif __name__ == \"__main__\":\r\n    demo_2()\r\n\r\n==============运行结果==============\r\nD:\\Programs\\Python\\Python36\\python.exe D:/练习/leecode/fuzadu.py\r\n[5, 4, 3, 2, 1]\r\n```\r\nProcess finished with exit code 0\r\n跟第一个解法相比，第二个解法少了一个for循环，而且循环次数只是到了列表的一半，那么时间复杂度就是O(n/2)，\r\n由于复杂度与具体的常系数无关的性质，这段代码的时间复杂度还是 O(n)。\r\n\r\n但是在空间复杂度上，第二个解法开辟了一个新的变量tmp，它与数组长度无关。\r\n输入是 5 个元素的数组，需要一个tmp变量输入是 50 个元素的数组，同样只需要一个tmp变量。\r\n\r\n因此，空间复杂度与输入数组长度无关，这就是 O(1)。\r\n\r\n# 二、分析复杂度\r\n这里就直接上一些经验性的结论，可以直接拿过来用的：\r\n\r\n一个顺序结构的代码，时间复杂度是 O(1)。\r\n一个简单的 for 循环，时间复杂度是 O(n)。\r\n两个顺序执行的 for 循环，时间复杂度是 O(n)+O(n)=O(2n)，其实也是 O(n)。\r\n两个嵌套的 for 循环，时间复杂度是 O(n²)。\r\n二分查找，时间复杂度都是 O(logn)。\r\n趁热打铁，分析一下下面代码的复杂度：\r\n```\r\nfor (i = 0; i < n; i++) {\r\n    for (j = 0; j < n; j++) {\r\n        for (k = 0; k < n; k++) {\r\n        }\r\n        for (m = 0; m < n; m++) {\r\n        }\r\n    }\r\n}\r\n```\r\n可以先从最里面看，最内层是2个顺序结构的for循环，复杂度是O(n)。\r\n中间这层的又嵌套了一个for循环，所以这时候复杂度就变成了O(n^2)。\r\n最后，最外层又嵌套了一个for循环，所以最终的复杂度就是O(n^3)。\r\n','【简单算法】什么是复杂度？',4,'2020-12-22 11:00:16',2),(8,'<h1 id=\"h1-hello-2019\"><a name=\"Hello,2019\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,2019</h1><h2 id=\"h2-hello-world\"><a name=\"Hello,World\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,World</h2><h3 id=\"h3-hello-yiblog\"><a name=\"Hello,yiblog\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,yiblog</h3>','# Hello,2019\r\n## Hello,World\r\n### Hello,yiblog\r\n','Hello,2019',1,'2019-12-24 21:04:49',0),(9,'<h1 id=\"h1-hello-2018\"><a name=\"Hello,2018\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,2018</h1><h2 id=\"h2-hello-world\"><a name=\"Hello,World\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,World</h2><h3 id=\"h3-hello-yiblog\"><a name=\"Hello,YIBLOG\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hello,YIBLOG</h3>','# Hello,2018\r\n## Hello,World\r\n### Hello,YIBLOG','Hello,2018',1,'2018-12-24 21:05:53',0),(10,'<h1 id=\"h1-u524Du8A00\"><a name=\"前言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前言</h1><p>删除表，大家下意识想到的命令可能是直接使用DROP TABLE “表名”，这是初生牛犊的做法，因为当要删除的表达空间到几十G，甚至是几百G的表时候。这样一条命令下去，MySQL可能就直接夯住了，外在表现就是QPS急速下降，客户请求变慢。</p>\r\n<h1 id=\"h1-u89E3u51B3u529Eu6CD5\"><a name=\"解决办法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>解决办法</h1><h2 id=\"h2-1-\"><a name=\"1.业务低峰时间手动执行删除\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.业务低峰时间手动执行删除</h2><p>这个可能就需要DBA不辞辛劳，大晚上爬起来删表了。</p>\r\n<h2 id=\"h2-2-\"><a name=\"2.先清除数据，最后再删除的方式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.先清除数据，最后再删除的方式</h2><p>譬如1000万条数据，写脚本每次删除20万，睡眠一段时间，继续执行。这样也能做到对用户无感知。</p>\r\n<h2 id=\"h2-3-idb-\"><a name=\"3.对表文件（idb文件）做一个硬链接来加速删除\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.对表文件（idb文件）做一个硬链接来加速删除</h2><p>这个方法利用了linux下硬链接的知识，来进行快速删除，不记得话可以回去翻一下《鸟哥的linux私房菜》</p>\r\n<pre><code>ln data_center_update_log.ibd data_center_update_log.ibd.hdlk\r\n\r\n[root@mysql01 sports_center]# ll\r\n总用量 19903792\r\n-rw-r----- 1 mysql mysql       9076 10月 17 13:15 data_center_update_log.frm\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd.hdlk\r\n</code></pre><p>执行上面命令后，我们就多了一个data_center_update_log.ibd.hdlk文件。此操作实际上不会占用磁盘空间，只是增加了一次对磁盘上文件的引用。<br>当我们删除其中任何一个文件时，都不会影响磁盘上真实的文件，只是将其引用数目减去1。当被引用的数目变为1的时候，再去删除文件，才会真正做IO来删除它。<br>正是利用这个特点，将由原来mysql来删除大文件的操作，转换为一个简单的操作系统级的文件删除，从而减少了对mysql的影响。</p>\r\n<h2 id=\"h2-4-mysql-drop-\"><a name=\"4.登陆mysql，执行drop表操作\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.登陆mysql，执行drop表操作</h2><p>很快，200万条数据只用了1秒完成，此操作是在创建硬链接后执行的</p>\r\n<pre><code>mysql&gt; drop tables data_center_update_log;\r\nQuery OK, 0 rows affected (1.02 sec)\r\n\r\n\r\nmysql&gt; exit\r\nBye\r\n</code></pre><p>退出来，再次查看数据目录，发现就只剩data_center_update_log.ibd.hdlk硬链接文件了</p>\r\n<pre><code>[root@mysql01 sports_center]# ll\r\n总用量 19903792\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd.hdlk\r\n</code></pre><h2 id=\"h2-5-ibd-hdlk-5-ibd-hdlk-\"><a name=\"5.如何正确删除ibd.hdlk硬链接文件呢5.如何正确删除ibd.hdlk硬链接文件呢\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.如何正确删除ibd.hdlk硬链接文件呢5.如何正确删除ibd.hdlk硬链接文件呢</h2><p>虽然drop table之后，剩下的硬链接文件已经和mysql没有关系了。但如果文件过大，直接用rm命令来删除，也是会造成IO开销飙升，CPU负载过高，进而影响到MySQL。<br>这里我们用到的方法，可以循环分块删除，慢慢地清理文件，通过一个脚本即可搞定<br>Truncate命令通常用于将文件缩小或扩展到指定的大小。如果文件大于指定的大小，则会丢失额外的数据。如果文件较短，则会对其进行扩展，并且扩展部分的读数为零字节。</p>\r\n<h3 id=\"h3-5-1-truncate-\"><a name=\"5.1 安装truncate命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.1 安装truncate命令</h3><pre><code>[root@mysql01 ~]# cruncate\r\n-bash: cruncate: 未找到命令\r\n</code></pre><p>通常操作系统会安装truncate命令，该命令在coreutils安装包里面，如果没有安装可以使用下面命令安装</p>\r\n<pre><code>[root@mysql01 ~]# yum provides truncate\r\ncoreutils-8.22-24.el7.x86_64 : A set of basic GNU tools commonly used in shell scripts\r\n源    ：base\r\n匹配来源：\r\n文件名    ：/usr/bin/truncate\r\n\r\n可以看到truncate由coreutils安装包提供，下面安装coreutils安装包：\r\n\r\n[root@mysql01 ~]# yum install -y coreutils\r\n</code></pre><h3 id=\"h3-5-2-truncate-\"><a name=\"5.2 truncate常用选项\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.2 truncate常用选项</h3><pre><code>-c, --no-create --&gt; 不创建任何文件 \r\n-o, --io-blocks --&gt; 将大小视为存储块的数量，而不是字节 \r\n-r, --reference=RFILE --&gt; 参考指定的文件大小 \r\n-s, --size=SIZE --&gt; 按照指定的字节设置文件大小\r\n</code></pre><h3 id=\"h3-5-3-truncate_bigfile-sh-\"><a name=\"5.3 truncate_bigfile.sh脚本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.3 truncate_bigfile.sh脚本</h3><p>原理：使用truncate -s选项可以指定文件大小，通过脚本指定每次文件减少的大小，并sleep睡眠一定时间，从而达到可控的删除文件<br>附：truncate_bigfile.sh脚本</p>\r\n<pre><code>#! /bin/bash\r\n#\r\n\r\nTRUNCATE=/usr/bin/truncate\r\nFILE=$1\r\n\r\nif [ x&quot;$1&quot; = x ];then\r\n    echo &quot;Please input filename in&quot;\r\n    exit 1;\r\nelse\r\n    SIZE_M=$(du -sm &quot;$1&quot; | awk &#39;{print $1}&#39;)\r\n\r\n    for i in $(seq &quot;${SIZE_M}&quot; -100 0)\r\n    do\r\n        sleep 1\r\n        echo &quot;${TRUNCATE} -s ${i}M ${FILE}&quot;\r\n        ${TRUNCATE} -s &quot;${i}&quot;M &quot;${FILE}&quot;\r\n    done\r\nfi\r\n\r\nif [  $? -eq 0 ];then\r\n        \\rm -f &quot;${FILE}&quot;\r\nelse\r\n        echo &quot;Please check file&quot;\r\nfi\r\n</code></pre>','# 前言\r\n删除表，大家下意识想到的命令可能是直接使用DROP TABLE \"表名\"，这是初生牛犊的做法，因为当要删除的表达空间到几十G，甚至是几百G的表时候。这样一条命令下去，MySQL可能就直接夯住了，外在表现就是QPS急速下降，客户请求变慢。\r\n\r\n# 解决办法\r\n## 1.业务低峰时间手动执行删除\r\n这个可能就需要DBA不辞辛劳，大晚上爬起来删表了。\r\n\r\n## 2.先清除数据，最后再删除的方式\r\n譬如1000万条数据，写脚本每次删除20万，睡眠一段时间，继续执行。这样也能做到对用户无感知。\r\n\r\n## 3.对表文件（idb文件）做一个硬链接来加速删除\r\n这个方法利用了linux下硬链接的知识，来进行快速删除，不记得话可以回去翻一下《鸟哥的linux私房菜》\r\n\r\n```\r\nln data_center_update_log.ibd data_center_update_log.ibd.hdlk\r\n\r\n[root@mysql01 sports_center]# ll\r\n总用量 19903792\r\n-rw-r----- 1 mysql mysql       9076 10月 17 13:15 data_center_update_log.frm\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd.hdlk\r\n```\r\n\r\n执行上面命令后，我们就多了一个data_center_update_log.ibd.hdlk文件。此操作实际上不会占用磁盘空间，只是增加了一次对磁盘上文件的引用。\r\n当我们删除其中任何一个文件时，都不会影响磁盘上真实的文件，只是将其引用数目减去1。当被引用的数目变为1的时候，再去删除文件，才会真正做IO来删除它。\r\n正是利用这个特点，将由原来mysql来删除大文件的操作，转换为一个简单的操作系统级的文件删除，从而减少了对mysql的影响。\r\n## 4.登陆mysql，执行drop表操作\r\n很快，200万条数据只用了1秒完成，此操作是在创建硬链接后执行的\r\n```\r\nmysql> drop tables data_center_update_log;\r\nQuery OK, 0 rows affected (1.02 sec)\r\n\r\n\r\nmysql> exit\r\nBye\r\n```\r\n退出来，再次查看数据目录，发现就只剩data_center_update_log.ibd.hdlk硬链接文件了\r\n```\r\n[root@mysql01 sports_center]# ll\r\n总用量 19903792\r\n-rw-r----- 2 mysql mysql 8447328256 12月 23 11:35 data_center_update_log.ibd.hdlk\r\n```\r\n## 5.如何正确删除ibd.hdlk硬链接文件呢5.如何正确删除ibd.hdlk硬链接文件呢\r\n虽然drop table之后，剩下的硬链接文件已经和mysql没有关系了。但如果文件过大，直接用rm命令来删除，也是会造成IO开销飙升，CPU负载过高，进而影响到MySQL。\r\n这里我们用到的方法，可以循环分块删除，慢慢地清理文件，通过一个脚本即可搞定\r\nTruncate命令通常用于将文件缩小或扩展到指定的大小。如果文件大于指定的大小，则会丢失额外的数据。如果文件较短，则会对其进行扩展，并且扩展部分的读数为零字节。\r\n### 5.1 安装truncate命令\r\n```\r\n[root@mysql01 ~]# cruncate\r\n-bash: cruncate: 未找到命令\r\n```\r\n通常操作系统会安装truncate命令，该命令在coreutils安装包里面，如果没有安装可以使用下面命令安装\r\n```\r\n[root@mysql01 ~]# yum provides truncate\r\ncoreutils-8.22-24.el7.x86_64 : A set of basic GNU tools commonly used in shell scripts\r\n源    ：base\r\n匹配来源：\r\n文件名    ：/usr/bin/truncate\r\n\r\n可以看到truncate由coreutils安装包提供，下面安装coreutils安装包：\r\n\r\n[root@mysql01 ~]# yum install -y coreutils\r\n```\r\n### 5.2 truncate常用选项\r\n```\r\n-c, --no-create --> 不创建任何文件 \r\n-o, --io-blocks --> 将大小视为存储块的数量，而不是字节 \r\n-r, --reference=RFILE --> 参考指定的文件大小 \r\n-s, --size=SIZE --> 按照指定的字节设置文件大小 \r\n```\r\n### 5.3 truncate_bigfile.sh脚本\r\n原理：使用truncate -s选项可以指定文件大小，通过脚本指定每次文件减少的大小，并sleep睡眠一定时间，从而达到可控的删除文件\r\n附：truncate_bigfile.sh脚本\r\n```\r\n#! /bin/bash\r\n#\r\n\r\nTRUNCATE=/usr/bin/truncate\r\nFILE=$1\r\n\r\nif [ x\"$1\" = x ];then\r\n	echo \"Please input filename in\"\r\n	exit 1;\r\nelse\r\n	SIZE_M=$(du -sm \"$1\" | awk \'{print $1}\')\r\n\r\n	for i in $(seq \"${SIZE_M}\" -100 0)\r\n	do\r\n		sleep 1\r\n		echo \"${TRUNCATE} -s ${i}M ${FILE}\"\r\n		${TRUNCATE} -s \"${i}\"M \"${FILE}\"\r\n	done\r\nfi\r\n\r\nif [  $? -eq 0 ];then\r\n        \\rm -f \"${FILE}\"\r\nelse\r\n        echo \"Please check file\"\r\nfi\r\n```','MySQL如何优雅的删除大表',6,'2020-12-24 21:20:40',0),(11,'<h1 id=\"h1--redis\"><a name=\"我是Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>我是Redis</h1><p>你好，我是Redis，一个叫Antirez的男人把我带到了这个世界上。<br>说起我的诞生，跟关系数据库MySQL还挺有渊源的。</p>\r\n<p>在我还没来到这个世界上的时候，MySQL过的很辛苦，互联网发展的越来越快，它容纳的数据也越来越多，用户请求也随之暴涨，而每一个用户请求都变成了对它的一个又一个读写操作，MySQL是苦不堪言。尤其是到“双11”、“618“这种全民购物狂欢的日子，都是MySQL受苦受难的日子。</p>\r\n<p>据后来MySQL告诉我说，其实有一大半的用户请求都是读操作，而且经常都是重复查询一个东西，浪费它很多时间去进行磁盘I/O。</p>\r\n<p>后来有人就琢磨，是不是可以学学CPU，给数据库也加一个缓存呢？于是我就诞生了！</p>\r\n<p>出生不久，我就和MySQL成为了好朋友，我们俩常常携手出现在后端服务器中。</p>\r\n<p>应用程序们从MySQL查询到的数据，在我这里登记一下，后面再需要用到的时候，就先找我要，我这里没有再找MySQL要。<br>为了方便使用，我支持好几种数据结构的存储：</p>\r\n<pre><code>String\r\n\r\nHash\r\n\r\nList\r\n\r\nSet\r\n\r\nSortedSet\r\n\r\nBitmap\r\n\r\n······\r\n</code></pre><p>因为我把登记的数据都记录在内存中，不用去执行慢如蜗牛的I/O操作，所以找我要比找MySQL要省去了不少的时间呢。</p>\r\n<p>可别小瞧这简单的一个改变，我可为MySQL减轻了不小的负担！随着程序的运行，我缓存的数据越来越多，有相当部分时间我都给它挡住了用户请求，这一下它可乐得清闲自在了！</p>\r\n<p>有了我的加入，网络服务的性能提升了不少，这都归功于我为数据库挨了不少枪子儿。</p>\r\n<h1 id=\"h1--amp-amp-\"><a name=\"缓存过期 &amp;&amp; 缓存淘汰\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缓存过期 &amp;&amp; 缓存淘汰</h1><p>不过很快我发现事情不妙了，我缓存的数据都是在内存中，可是就算是在服务器上，内存的空间资源还是很有限的，不能无节制的这么存下去，我得想个办法，不然吃枣药丸。</p>\r\n<p>不久，我想到了一个办法：给缓存内容设置一个超时时间，具体设置多长交给应用程序们去设置，我要做的就是把过期了的内容从我里面删除掉，及时腾出空间就行了。<br>超时时间有了，我该在什么时候去干这个清理的活呢？</p>\r\n<p>最简单的就是定期删除，我决定100ms就做一次，一秒钟就是10次！</p>\r\n<p>我清理的时候也不能一口气把所有过期的都给删除掉，我这里面存了大量的数据，要全面扫一遍的话那不知道要花多久时间，会严重影响我接待新的客户请求的！<br>时间紧任务重，我只好随机选择一部分来清理，能缓解内存压力就行了。</p>\r\n<p>就这样过了一段日子，我发现有些个键值运气比较好，每次都没有被我的随机算法选中，每次都能幸免于难，这可不行，这些长时间过期的数据一直霸占着不少的内存空间！气抖冷！</p>\r\n<p>我眼里可揉不得沙子！于是在原来定期删除的基础上，又加了一招：</p>\r\n<p>那些原来逃脱我随机选择算法的键值，一旦遇到查询请求，被我发现已经超期了，那我就绝不客气，立即删除。</p>\r\n<p>这种方式因为是被动式触发的，不查询就不会发生，所以也叫惰性删除！</p>\r\n<p>可是，还是有部分键值，既逃脱了我的随机选择算法，又一直没有被查询，导致它们一直逍遥法外！而于此同时，可以使用的内存空间却越来越少。<br>而且就算退一步讲，我能够把过期的数据都删除掉，那万一过期时间设置的很长，还没等到我去清理，内存就吃满了，一样要吃枣药丸，所以我还得想个办法。</p>\r\n<p>我苦思良久，终于憋出了个大招：内存淘汰策略，这一次我要彻底解决问题！</p>\r\n<p>我提供了8种策略供应用程序选择，用于我遇到内存不足时该如何决策：</p>\r\n<pre><code>noeviction：返回错误，不会删除任何键值\r\n\r\nallkeys-lru：使用LRU算法删除最近最少使用的键值\r\n\r\nvolatile-lru：使用LRU算法从设置了过期时间的键集合中删除最近最少使用的键值\r\n\r\nallkeys-random：从所有key随机删除\r\n\r\nvolatile-random：从设置了过期时间的键的集合中随机删除\r\n\r\nvolatile-ttl：从设置了过期时间的键中删除剩余时间最短的键\r\n\r\nvolatile-lfu：从配置了过期时间的键中删除使用频率最少的键\r\n\r\nallkeys-lfu：从所有键中删除使用频率最少的键\r\n</code></pre><p>有了上面几套组合拳，我再也不用担心过期数据多了把空间撑满的问题了~</p>\r\n<h1 id=\"h1--amp-amp-\"><a name=\"缓存穿透 &amp;&amp; 布隆过滤器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缓存穿透 &amp;&amp; 布隆过滤器</h1><p>我的日子过的还挺舒坦，不过MySQL大哥就没我这么舒坦了，有时候遇到些烦人的请求，查询的数据不存在，MySQL就要白忙活一场！不仅如此，因为不存在，我也没法缓存啊，导致同样的请求来了每次都要去让MySQL白忙活一场。我作为缓存的价值就没得到体现啦！这就是人们常说的缓存穿透。<br>这一来二去，MySQL大哥忍不住了：“唉，兄弟，能不能帮忙想个办法，把那些明知道不会有结果的查询请求给我挡一下”</p>\r\n<p>这时我想到了我的另外一个好朋友：布隆过滤器<br>我这位朋友别的本事没有，就擅长从超大的数据集中快速告诉你查找的数据存不存在（悄悄告诉你，我的这位朋友有一点不靠谱，它告诉你存在的话不能全信，其实有可能是不存在的，不过它他要是告诉你不存在的话，那就一定不存在）。<br>如果你对我这位朋友感兴趣的话，可以看看这里《白话布隆过滤器BloomFilter》。</p>\r\n<p>我把这位朋友介绍给了应用程序，不存在的数据就不必去叨扰MySQL了，轻松帮忙解决了缓存穿透的问题。</p>\r\n<h1 id=\"h1--amp-amp-\"><a name=\"缓存击穿 &amp;&amp; 缓存雪崩\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缓存击穿 &amp;&amp; 缓存雪崩</h1><p>这之后过了一段时间太平日子，直到那一天···</p>\r\n<p>有一次，MySQL那家伙正优哉游哉的摸鱼，突然一大堆请求给他怼了过去，给他打了一个措手不及。</p>\r\n<p>一阵忙活之后，MySQL怒气冲冲的找到了我，“兄弟，咋回事啊，怎么一下子来的这么猛”<br>我查看了日志，赶紧解释到：“大哥，实在不好意思，刚刚有一个热点数据到了过期时间，被我删掉了，不巧的是随后就有对这个数据的大量查询请求来了，我这里已经删了，所以请求都发到你那里来了”</p>\r\n<p>“你这干的叫啥事，下次注意点啊”，MySQL大哥一脸不高兴的离开了。</p>\r\n<p>这一件小事我也没怎么放在心上，随后就抛之脑后了，却没曾想几天之后竟捅了更大的篓子。</p>\r\n<p>那一天，又出现了大量的网络请求发到了MySQL那边，比上一次的规模大得多，MySQL大哥一会儿功夫就给干趴下了好几次！</p>\r\n<p>等了好半天这一波流量才算过去，MySQL才缓过神来。</p>\r\n<p>“老弟，这一次又是什么原因？”，MySQL大哥累的没了力气。</p>\r\n<p>“这一次比上一次更不巧，这一次是一大批数据几乎同时过了有效期，然后又发生了很多对这些数据的请求，所以比起上一次这规模更大了”<br>MySQL大哥听了眉头一皱，“那你倒是想个办法啊，三天两头折磨我，这谁顶得住啊？”</p>\r\n<p>“其实我也很无奈，这个时间也不是我设置的，要不我去找应用程序说说，让他把缓存过期时间设置的均匀一些？至少别让大量数据集体失效”</p>\r\n<p>“走，咱俩一起去”</p>\r\n<p>后来，我俩去找应用程序商量了，不仅把键值的过期时间随机了一下，还设置了热点数据永不过期，这个问题缓解了不少。哦对了，我们还把这两次发生的问题分别取了个名字：缓存击穿和缓存雪崩。</p>\r\n<p>我们终于又过上了舒适的日子···</p>\r\n','# 我是Redis\r\n你好，我是Redis，一个叫Antirez的男人把我带到了这个世界上。\r\n说起我的诞生，跟关系数据库MySQL还挺有渊源的。\r\n\r\n在我还没来到这个世界上的时候，MySQL过的很辛苦，互联网发展的越来越快，它容纳的数据也越来越多，用户请求也随之暴涨，而每一个用户请求都变成了对它的一个又一个读写操作，MySQL是苦不堪言。尤其是到“双11”、“618“这种全民购物狂欢的日子，都是MySQL受苦受难的日子。\r\n\r\n据后来MySQL告诉我说，其实有一大半的用户请求都是读操作，而且经常都是重复查询一个东西，浪费它很多时间去进行磁盘I/O。\r\n\r\n后来有人就琢磨，是不是可以学学CPU，给数据库也加一个缓存呢？于是我就诞生了！\r\n\r\n出生不久，我就和MySQL成为了好朋友，我们俩常常携手出现在后端服务器中。\r\n\r\n应用程序们从MySQL查询到的数据，在我这里登记一下，后面再需要用到的时候，就先找我要，我这里没有再找MySQL要。\r\n为了方便使用，我支持好几种数据结构的存储：\r\n```\r\nString\r\n\r\nHash\r\n\r\nList\r\n\r\nSet\r\n\r\nSortedSet\r\n\r\nBitmap\r\n\r\n······\r\n```\r\n因为我把登记的数据都记录在内存中，不用去执行慢如蜗牛的I/O操作，所以找我要比找MySQL要省去了不少的时间呢。\r\n\r\n可别小瞧这简单的一个改变，我可为MySQL减轻了不小的负担！随着程序的运行，我缓存的数据越来越多，有相当部分时间我都给它挡住了用户请求，这一下它可乐得清闲自在了！\r\n\r\n有了我的加入，网络服务的性能提升了不少，这都归功于我为数据库挨了不少枪子儿。\r\n# 缓存过期 && 缓存淘汰\r\n不过很快我发现事情不妙了，我缓存的数据都是在内存中，可是就算是在服务器上，内存的空间资源还是很有限的，不能无节制的这么存下去，我得想个办法，不然吃枣药丸。\r\n\r\n不久，我想到了一个办法：给缓存内容设置一个超时时间，具体设置多长交给应用程序们去设置，我要做的就是把过期了的内容从我里面删除掉，及时腾出空间就行了。\r\n超时时间有了，我该在什么时候去干这个清理的活呢？\r\n\r\n最简单的就是定期删除，我决定100ms就做一次，一秒钟就是10次！\r\n\r\n我清理的时候也不能一口气把所有过期的都给删除掉，我这里面存了大量的数据，要全面扫一遍的话那不知道要花多久时间，会严重影响我接待新的客户请求的！\r\n时间紧任务重，我只好随机选择一部分来清理，能缓解内存压力就行了。\r\n\r\n \r\n\r\n就这样过了一段日子，我发现有些个键值运气比较好，每次都没有被我的随机算法选中，每次都能幸免于难，这可不行，这些长时间过期的数据一直霸占着不少的内存空间！气抖冷！\r\n\r\n我眼里可揉不得沙子！于是在原来定期删除的基础上，又加了一招：\r\n\r\n那些原来逃脱我随机选择算法的键值，一旦遇到查询请求，被我发现已经超期了，那我就绝不客气，立即删除。\r\n\r\n这种方式因为是被动式触发的，不查询就不会发生，所以也叫惰性删除！\r\n\r\n可是，还是有部分键值，既逃脱了我的随机选择算法，又一直没有被查询，导致它们一直逍遥法外！而于此同时，可以使用的内存空间却越来越少。\r\n而且就算退一步讲，我能够把过期的数据都删除掉，那万一过期时间设置的很长，还没等到我去清理，内存就吃满了，一样要吃枣药丸，所以我还得想个办法。\r\n\r\n我苦思良久，终于憋出了个大招：内存淘汰策略，这一次我要彻底解决问题！\r\n\r\n我提供了8种策略供应用程序选择，用于我遇到内存不足时该如何决策：\r\n```\r\nnoeviction：返回错误，不会删除任何键值\r\n\r\nallkeys-lru：使用LRU算法删除最近最少使用的键值\r\n\r\nvolatile-lru：使用LRU算法从设置了过期时间的键集合中删除最近最少使用的键值\r\n\r\nallkeys-random：从所有key随机删除\r\n\r\nvolatile-random：从设置了过期时间的键的集合中随机删除\r\n\r\nvolatile-ttl：从设置了过期时间的键中删除剩余时间最短的键\r\n\r\nvolatile-lfu：从配置了过期时间的键中删除使用频率最少的键\r\n\r\nallkeys-lfu：从所有键中删除使用频率最少的键\r\n```\r\n有了上面几套组合拳，我再也不用担心过期数据多了把空间撑满的问题了~\r\n# 缓存穿透 && 布隆过滤器\r\n我的日子过的还挺舒坦，不过MySQL大哥就没我这么舒坦了，有时候遇到些烦人的请求，查询的数据不存在，MySQL就要白忙活一场！不仅如此，因为不存在，我也没法缓存啊，导致同样的请求来了每次都要去让MySQL白忙活一场。我作为缓存的价值就没得到体现啦！这就是人们常说的缓存穿透。\r\n这一来二去，MySQL大哥忍不住了：“唉，兄弟，能不能帮忙想个办法，把那些明知道不会有结果的查询请求给我挡一下”\r\n\r\n这时我想到了我的另外一个好朋友：布隆过滤器\r\n我这位朋友别的本事没有，就擅长从超大的数据集中快速告诉你查找的数据存不存在（悄悄告诉你，我的这位朋友有一点不靠谱，它告诉你存在的话不能全信，其实有可能是不存在的，不过它他要是告诉你不存在的话，那就一定不存在）。\r\n如果你对我这位朋友感兴趣的话，可以看看这里《白话布隆过滤器BloomFilter》。\r\n\r\n我把这位朋友介绍给了应用程序，不存在的数据就不必去叨扰MySQL了，轻松帮忙解决了缓存穿透的问题。\r\n# 缓存击穿 && 缓存雪崩\r\n这之后过了一段时间太平日子，直到那一天···\r\n\r\n有一次，MySQL那家伙正优哉游哉的摸鱼，突然一大堆请求给他怼了过去，给他打了一个措手不及。\r\n\r\n一阵忙活之后，MySQL怒气冲冲的找到了我，“兄弟，咋回事啊，怎么一下子来的这么猛”\r\n我查看了日志，赶紧解释到：“大哥，实在不好意思，刚刚有一个热点数据到了过期时间，被我删掉了，不巧的是随后就有对这个数据的大量查询请求来了，我这里已经删了，所以请求都发到你那里来了”\r\n\r\n“你这干的叫啥事，下次注意点啊”，MySQL大哥一脸不高兴的离开了。\r\n\r\n这一件小事我也没怎么放在心上，随后就抛之脑后了，却没曾想几天之后竟捅了更大的篓子。\r\n\r\n那一天，又出现了大量的网络请求发到了MySQL那边，比上一次的规模大得多，MySQL大哥一会儿功夫就给干趴下了好几次！\r\n\r\n等了好半天这一波流量才算过去，MySQL才缓过神来。\r\n\r\n“老弟，这一次又是什么原因？”，MySQL大哥累的没了力气。\r\n\r\n“这一次比上一次更不巧，这一次是一大批数据几乎同时过了有效期，然后又发生了很多对这些数据的请求，所以比起上一次这规模更大了”\r\nMySQL大哥听了眉头一皱，“那你倒是想个办法啊，三天两头折磨我，这谁顶得住啊？”\r\n\r\n“其实我也很无奈，这个时间也不是我设置的，要不我去找应用程序说说，让他把缓存过期时间设置的均匀一些？至少别让大量数据集体失效”\r\n\r\n“走，咱俩一起去”\r\n\r\n后来，我俩去找应用程序商量了，不仅把键值的过期时间随机了一下，还设置了热点数据永不过期，这个问题缓解了不少。哦对了，我们还把这两次发生的问题分别取了个名字：缓存击穿和缓存雪崩。\r\n\r\n我们终于又过上了舒适的日子···','还不懂Redis？看完这个故事就明白了！',6,'2020-12-24 21:25:46',2);
/*!40000 ALTER TABLE `t_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_category`
--

DROP TABLE IF EXISTS `t_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_category` (
  `category_id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_category`
--

LOCK TABLES `t_category` WRITE;
/*!40000 ALTER TABLE `t_category` DISABLE KEYS */;
INSERT INTO `t_category` VALUES (1,'默认'),(2,'springboot'),(3,'前端'),(4,'算法'),(5,'插件'),(6,'数据库');
/*!40000 ALTER TABLE `t_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_comment`
--

DROP TABLE IF EXISTS `t_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_comment` (
  `comment_id` int NOT NULL AUTO_INCREMENT,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `link` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `article_id` int NOT NULL,
  `comment` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `time` datetime DEFAULT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `article_id_idx` (`article_id`),
  CONSTRAINT `article_id` FOREIGN KEY (`article_id`) REFERENCES `t_article` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_comment`
--

LOCK TABLES `t_comment` WRITE;
/*!40000 ALTER TABLE `t_comment` DISABLE KEYS */;
INSERT INTO `t_comment` VALUES (1,'111.@163.com','测试','',6,'评论测试','2020-12-22 11:56:27'),(2,'cscs@163.com','测试2','',11,'这是一条评论测试','2020-12-24 21:43:58'),(3,'taoweishu@163.com','taoweishu','',4,'你好，我是taoweishu','2020-12-24 21:44:36'),(4,'taoweishu2@qq.com','taoweishu2','',3,'你好，我是taoweishu2','2020-12-24 21:45:20'),(5,'taoweishu3@qq.com','taoweishu3','',2,'你好，我是taoweishu3','2020-12-24 21:45:39'),(6,'taoweishu4@qq.com','taoweishu4','',1,'你好，我是taoweishu4','2020-12-24 21:46:01'),(7,'taoweishu5@qq.com','taoweishu5','',1,'你好，我是taoweishu5','2020-12-24 21:46:20');
/*!40000 ALTER TABLE `t_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_log`
--

DROP TABLE IF EXISTS `t_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_log` (
  `log_id` int NOT NULL AUTO_INCREMENT,
  `action` varchar(100) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_log`
--

LOCK TABLES `t_log` WRITE;
/*!40000 ALTER TABLE `t_log` DISABLE KEYS */;
INSERT INTO `t_log` VALUES (1,'登录后台','2019-12-24 21:04:03'),(2,'发布文章:Hello,2019','2019-12-24 21:04:49'),(3,'发布文章:Hello,2018','2018-12-24 21:05:53'),(4,'登录后台','2020-12-24 21:06:28'),(5,'添加分类:默认','2020-12-24 21:11:45'),(6,'发布文章:MySQL如何优雅的删除大表','2020-12-24 21:20:40'),(7,'发布文章:还不懂Redis？看完这个故事就明白了！','2020-12-24 21:25:46'),(8,'登录后台','2020-12-24 21:46:31');
/*!40000 ALTER TABLE `t_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `create_time` datetime NOT NULL,
  `email` varchar(255) NOT NULL,
  `blog_title` varchar(255) NOT NULL DEFAULT 'yiblog',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-12-24 21:50:01
